
import Project.ConnectionProvider;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author User
 */
public class editBooks extends javax.swing.JFrame {

    /**
     * Creates new form editBooks
     */
    public editBooks() {
        initComponents();
        setupBookEditListener();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel13 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        BookID = new javax.swing.JTextField();
        BookTitle = new javax.swing.JTextField();
        Author = new javax.swing.JTextField();
        PublicationYear = new javax.swing.JTextField();
        Language = new javax.swing.JTextField();
        CopiesAvailable = new javax.swing.JTextField();
        Genre = new javax.swing.JComboBox<>();
        Formate = new javax.swing.JComboBox<>();
        save = new javax.swing.JButton();
        close = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();

        jLabel13.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText("BookWise | Library Management System");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocation(new java.awt.Point(135, 215));
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Book ID");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 60, -1, -1));

        jLabel2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Book title");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 100, -1, -1));

        jLabel3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Author");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 140, -1, -1));

        jLabel4.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Publication Year");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 180, -1, -1));

        jLabel5.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Language");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 220, -1, -1));

        jLabel6.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Genre");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 300, -1, -1));

        jLabel7.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Format");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 340, -1, -1));

        jLabel8.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Copies Available");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 260, -1, -1));

        BookID.setBackground(new java.awt.Color(255, 255, 255));
        BookID.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        BookID.setForeground(new java.awt.Color(0, 102, 255));
        BookID.setCaretColor(new java.awt.Color(0, 102, 255));
        BookID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BookIDActionPerformed(evt);
            }
        });
        getContentPane().add(BookID, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 50, 234, 30));

        BookTitle.setBackground(new java.awt.Color(255, 255, 255));
        BookTitle.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        BookTitle.setForeground(new java.awt.Color(0, 102, 255));
        BookTitle.setCaretColor(new java.awt.Color(0, 102, 255));
        getContentPane().add(BookTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 90, 234, 30));

        Author.setBackground(new java.awt.Color(255, 255, 255));
        Author.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        Author.setForeground(new java.awt.Color(0, 102, 255));
        Author.setCaretColor(new java.awt.Color(0, 102, 255));
        getContentPane().add(Author, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 130, 234, 29));

        PublicationYear.setBackground(new java.awt.Color(255, 255, 255));
        PublicationYear.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        PublicationYear.setForeground(new java.awt.Color(0, 102, 255));
        PublicationYear.setCaretColor(new java.awt.Color(0, 102, 255));
        PublicationYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PublicationYearActionPerformed(evt);
            }
        });
        getContentPane().add(PublicationYear, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 170, 234, 31));

        Language.setBackground(new java.awt.Color(255, 255, 255));
        Language.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        Language.setForeground(new java.awt.Color(0, 102, 255));
        Language.setCaretColor(new java.awt.Color(0, 102, 255));
        Language.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LanguageActionPerformed(evt);
            }
        });
        getContentPane().add(Language, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 210, 234, 31));

        CopiesAvailable.setBackground(new java.awt.Color(255, 255, 255));
        CopiesAvailable.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        CopiesAvailable.setForeground(new java.awt.Color(0, 102, 255));
        CopiesAvailable.setCaretColor(new java.awt.Color(0, 102, 255));
        CopiesAvailable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CopiesAvailableActionPerformed(evt);
            }
        });
        getContentPane().add(CopiesAvailable, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 250, 234, 31));

        Genre.setBackground(new java.awt.Color(255, 255, 255));
        Genre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        Genre.setForeground(new java.awt.Color(0, 102, 255));
        Genre.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Fiction", "Fantasy", "Science Fiction", "Mystery", "Thriller", "Romance", "Historical Fiction", "Non-Fiction", "Biography", "Self-Help", "Business", "Science", "Technology", "History", "Philosophy", "Poetry", "Drama", "Children's Literature" }));
        Genre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GenreActionPerformed(evt);
            }
        });
        getContentPane().add(Genre, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 290, 234, 34));

        Formate.setBackground(new java.awt.Color(255, 255, 255));
        Formate.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        Formate.setForeground(new java.awt.Color(0, 102, 255));
        Formate.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Hardcover", "Paperback", "E-Book", "Audio Book", "Digital PDF", "Large Print", "Library Binding" }));
        Formate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FormateActionPerformed(evt);
            }
        });
        getContentPane().add(Formate, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 335, 234, 35));

        save.setBackground(new java.awt.Color(51, 153, 255));
        save.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        save.setForeground(new java.awt.Color(255, 255, 255));
        save.setText("Save");
        save.setBorder(null);
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });
        getContentPane().add(save, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 400, 234, 30));

        close.setBackground(new java.awt.Color(255, 51, 51));
        close.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        close.setForeground(new java.awt.Color(255, 255, 255));
        close.setText("Close");
        close.setBorder(null);
        close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeActionPerformed(evt);
            }
        });
        getContentPane().add(close, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 440, 234, 30));

        jLabel14.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setText("BookWise | Library Management System");
        getContentPane().add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 510, -1, 30));

        jLabel9.setIcon(new javax.swing.ImageIcon("H:\\JAVA Projects\\LMS_new\\public\\small screen.jpg")); // NOI18N
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void setupBookEditListener() {
    BookID.getDocument().addDocumentListener(new DocumentListener() {
        @Override
        public void insertUpdate(DocumentEvent e) {
            fetchBookEdit();
        }
        @Override
        public void removeUpdate(DocumentEvent e) {
            fetchBookEdit();
        }
        @Override
        public void changedUpdate(DocumentEvent e) {
            fetchBookEdit();
        }
    });
}
    
    private void fetchBookEdit() {
    String bookId = BookID.getText();
    try {
        Connection con = ConnectionProvider.getConnection();
        if (con == null) {
            JOptionPane.showMessageDialog(this, "Database connection failed!");
            return;
        }
        
        String sql = "SELECT book_title, author, publication_year, language, " +
                     "copies_available, genre, format FROM books WHERE book_id = ?";
        PreparedStatement pst = con.prepareStatement(sql);
        pst.setString(1, bookId);
        
        ResultSet rs = pst.executeQuery();
        if (rs.next()) {
            BookTitle.setText(rs.getString("book_title"));
            Author.setText(rs.getString("author"));
            PublicationYear.setText(rs.getString("publication_year"));
            Language.setText(rs.getString("language"));
            CopiesAvailable.setText(rs.getString("copies_available"));
            
            // Set combo box values
            String genre = rs.getString("genre");
            String format = rs.getString("format");
            
            // Find and set the matching genre
            for (int i = 0; i < Genre.getItemCount(); i++) {
                if (Genre.getItemAt(i).equalsIgnoreCase(genre)) {
                    Genre.setSelectedIndex(i);
                    break;
                }
            }
            
            // Find and set the matching format
            for (int i = 0; i < Formate.getItemCount(); i++) {
                if (Formate.getItemAt(i).equalsIgnoreCase(format)) {
                    Formate.setSelectedIndex(i);
                    break;
                }
            }
        } else {
            // Clear fields if no book found
            BookTitle.setText("");
            Author.setText("");
            PublicationYear.setText("");
            Language.setText("");
            CopiesAvailable.setText("");
            Genre.setSelectedIndex(0);
            Formate.setSelectedIndex(0);
        }
        
        pst.close();
        rs.close();
        con.close();
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Database Error: " + e.getMessage());
        System.out.println("SQL State: " + e.getSQLState());
        System.out.println("Error Code: " + e.getErrorCode());
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
        e.printStackTrace();
    }
}
    
    private void BookIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BookIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BookIDActionPerformed

    private void PublicationYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PublicationYearActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PublicationYearActionPerformed

    private void LanguageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LanguageActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_LanguageActionPerformed

    private void CopiesAvailableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CopiesAvailableActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CopiesAvailableActionPerformed

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        try {
        // Get values from form fields
        String bookId = BookID.getText();
        String bookTitle = BookTitle.getText();
        String author = Author.getText();
        String publicationYear = PublicationYear.getText();
        String language = Language.getText();
        String copiesAvailable = CopiesAvailable.getText();
        String genre = Genre.getSelectedItem().toString();
        String format = Formate.getSelectedItem().toString();

        // Basic validation
        if (bookId.isEmpty() || bookTitle.isEmpty() || author.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Book ID, Title and Author are required fields!");
            return;
        }

        // Check if connection is successful
        Connection con = ConnectionProvider.getConnection();
        if (con == null) {
            JOptionPane.showMessageDialog(this, "Database connection failed!");
            return;
        }

        // SQL for updating an existing record
        String sql = "UPDATE books SET book_title = ?, author = ?, publication_year = ?, " +
                     "language = ?, copies_available = ?, genre = ?, format = ? WHERE book_id = ?";
        PreparedStatement pst = con.prepareStatement(sql);

        // Set values in prepared statement
        pst.setString(1, bookTitle);
        pst.setString(2, author);
        pst.setString(3, publicationYear);
        pst.setString(4, language);
        pst.setString(5, copiesAvailable);
        pst.setString(6, genre);
        pst.setString(7, format);
        pst.setString(8, bookId);

        // Execute the update
        int result = pst.executeUpdate();

        if (result > 0) {
            JOptionPane.showMessageDialog(this, "Book Updated Successfully!");
            // Clear fields
            BookID.setText("");
            BookTitle.setText("");
            Author.setText("");
            PublicationYear.setText("");
            Language.setText("");
            CopiesAvailable.setText("");
            // Safely set combo box values
            try {
                Genre.setSelectedIndex(0);
                Formate.setSelectedIndex(0);
            } catch (Exception e) {
                // Ignore combo box errors
            }
        } else {
            JOptionPane.showMessageDialog(this, "Failed to update book!");
        }

        // Close the prepared statement and connection
        pst.close();
        con.close();

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Database Error: " + e.getMessage());
        System.out.println("SQL State: " + e.getSQLState());
        System.out.println("Error Code: " + e.getErrorCode());
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
        e.printStackTrace();
    }
    }//GEN-LAST:event_saveActionPerformed

    private void closeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeActionPerformed
        setVisible(false);
        new newBooks().setVisible(true);
    }//GEN-LAST:event_closeActionPerformed

    private void GenreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GenreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_GenreActionPerformed

    private void FormateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FormateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_FormateActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(editBooks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(editBooks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(editBooks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(editBooks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new editBooks().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Author;
    private javax.swing.JTextField BookID;
    private javax.swing.JTextField BookTitle;
    private javax.swing.JTextField CopiesAvailable;
    private javax.swing.JComboBox<String> Formate;
    private javax.swing.JComboBox<String> Genre;
    private javax.swing.JTextField Language;
    private javax.swing.JTextField PublicationYear;
    private javax.swing.JButton close;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JButton save;
    // End of variables declaration//GEN-END:variables
}
