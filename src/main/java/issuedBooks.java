
import Project.ConnectionProvider;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;


/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author User
 */
public class issuedBooks extends javax.swing.JFrame {

    /**
     * Creates new form issuedBooks
     */
    public issuedBooks() {
        initComponents();
        setupStudentNameListener();
        setupBookTitleListener();
        fetchAndDisplayIssuedBooks();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        StudentID1 = new javax.swing.JTextField();
        SearchField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        StudentID = new javax.swing.JTextField();
        StudentName = new javax.swing.JTextField();
        BookID = new javax.swing.JTextField();
        BookTitle = new javax.swing.JTextField();
        IssuedDate = new com.toedter.calendar.JDateChooser();
        DueDate = new com.toedter.calendar.JDateChooser();
        jLabel7 = new javax.swing.JLabel();
        IssuedID = new javax.swing.JTextField();
        save = new javax.swing.JButton();
        close = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        IssuedBooksTable = new javax.swing.JTable();
        jLabel13 = new javax.swing.JLabel();
        SearchField1 = new javax.swing.JTextField();
        Search = new javax.swing.JButton();
        ShowAll = new javax.swing.JButton();
        LibraryDashboardNav = new javax.swing.JLabel();
        IssuedBooksNav = new javax.swing.JLabel();
        ReturnedBooksNav = new javax.swing.JLabel();
        AddNewMemberNav4 = new javax.swing.JLabel();
        AddNewBookNav = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();

        StudentID1.setBackground(new java.awt.Color(255, 255, 255));
        StudentID1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        StudentID1.setForeground(new java.awt.Color(0, 102, 255));
        StudentID1.setCaretColor(new java.awt.Color(0, 102, 255));

        SearchField.setBackground(new java.awt.Color(255, 255, 255));
        SearchField.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        SearchField.setForeground(new java.awt.Color(0, 102, 255));
        SearchField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchFieldActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocation(new java.awt.Point(0, 135));
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Student ID");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 250, -1, -1));

        jLabel2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Student Name ");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 290, -1, -1));

        jLabel3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Book ID");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 330, -1, -1));

        jLabel4.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Book Title");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 370, -1, -1));

        jLabel5.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Issue Date");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 410, -1, -1));

        jLabel6.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Due Date");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 450, -1, -1));

        StudentID.setBackground(new java.awt.Color(255, 255, 255));
        StudentID.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        StudentID.setForeground(new java.awt.Color(0, 102, 255));
        StudentID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StudentIDActionPerformed(evt);
            }
        });
        getContentPane().add(StudentID, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 240, 234, 27));

        StudentName.setBackground(new java.awt.Color(255, 255, 255));
        StudentName.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        StudentName.setForeground(new java.awt.Color(0, 102, 255));
        getContentPane().add(StudentName, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 280, 234, 29));

        BookID.setBackground(new java.awt.Color(255, 255, 255));
        BookID.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        BookID.setForeground(new java.awt.Color(0, 102, 255));
        BookID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BookIDActionPerformed(evt);
            }
        });
        getContentPane().add(BookID, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 320, 234, 29));

        BookTitle.setBackground(new java.awt.Color(255, 255, 255));
        BookTitle.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        BookTitle.setForeground(new java.awt.Color(0, 102, 255));
        getContentPane().add(BookTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 360, 234, 31));

        IssuedDate.setBackground(new java.awt.Color(255, 255, 255));
        IssuedDate.setForeground(new java.awt.Color(0, 102, 255));
        getContentPane().add(IssuedDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 403, 234, 31));

        DueDate.setBackground(new java.awt.Color(255, 255, 255));
        DueDate.setForeground(new java.awt.Color(0, 102, 255));
        getContentPane().add(DueDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 448, 234, 31));

        jLabel7.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Issue ID");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 210, -1, -1));

        IssuedID.setBackground(new java.awt.Color(255, 255, 255));
        IssuedID.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        IssuedID.setForeground(new java.awt.Color(0, 102, 255));
        getContentPane().add(IssuedID, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 200, 234, 28));

        save.setBackground(new java.awt.Color(51, 153, 255));
        save.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        save.setForeground(new java.awt.Color(255, 255, 255));
        save.setText("Save");
        save.setBorder(null);
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });
        getContentPane().add(save, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 500, 234, 33));

        close.setBackground(new java.awt.Color(255, 51, 51));
        close.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        close.setForeground(new java.awt.Color(255, 255, 255));
        close.setText("Close");
        close.setBorder(null);
        close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeActionPerformed(evt);
            }
        });
        getContentPane().add(close, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 540, 234, 33));

        IssuedBooksTable.setBackground(new java.awt.Color(51, 153, 255));
        IssuedBooksTable.setFont(new java.awt.Font("Arial", 1, 10)); // NOI18N
        IssuedBooksTable.setForeground(new java.awt.Color(255, 255, 255));
        IssuedBooksTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5", "Title 6", "Title 7"
            }
        ));
        IssuedBooksTable.setGridColor(new java.awt.Color(255, 255, 255));
        IssuedBooksTable.setIntercellSpacing(new java.awt.Dimension(2, 2));
        IssuedBooksTable.setSelectionBackground(new java.awt.Color(255, 51, 51));
        IssuedBooksTable.setSelectionForeground(new java.awt.Color(255, 255, 255));
        IssuedBooksTable.setShowGrid(true);
        IssuedBooksTable.setSurrendersFocusOnKeystroke(true);
        IssuedBooksTable.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                IssuedBooksTableAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jScrollPane1.setViewportView(IssuedBooksTable);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 200, 620, 370));

        jLabel13.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText(" BookWise | Library Management System");
        getContentPane().add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 660, -1, -1));

        SearchField1.setBackground(new java.awt.Color(255, 255, 255));
        SearchField1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        SearchField1.setForeground(new java.awt.Color(0, 102, 255));
        SearchField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchField1ActionPerformed(evt);
            }
        });
        getContentPane().add(SearchField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 160, 200, 30));

        Search.setBackground(new java.awt.Color(51, 153, 255));
        Search.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        Search.setForeground(new java.awt.Color(255, 255, 255));
        Search.setText("Search");
        Search.setBorder(null);
        Search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchActionPerformed(evt);
            }
        });
        getContentPane().add(Search, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 160, 200, 30));

        ShowAll.setBackground(new java.awt.Color(51, 153, 255));
        ShowAll.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        ShowAll.setForeground(new java.awt.Color(255, 255, 255));
        ShowAll.setText("Show All");
        ShowAll.setBorder(null);
        ShowAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowAllActionPerformed(evt);
            }
        });
        getContentPane().add(ShowAll, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 160, 200, 30));

        LibraryDashboardNav.setFont(new java.awt.Font("Arial", 0, 36)); // NOI18N
        LibraryDashboardNav.setForeground(new java.awt.Color(255, 255, 255));
        LibraryDashboardNav.setText(" Issued Books");
        LibraryDashboardNav.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                LibraryDashboardNavMouseClicked(evt);
            }
        });
        getContentPane().add(LibraryDashboardNav, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 30, -1, -1));

        IssuedBooksNav.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        IssuedBooksNav.setForeground(new java.awt.Color(0, 153, 255));
        IssuedBooksNav.setText("Library Dashboard");
        IssuedBooksNav.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                IssuedBooksNavMouseClicked(evt);
            }
        });
        getContentPane().add(IssuedBooksNav, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 50, -1, -1));

        ReturnedBooksNav.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        ReturnedBooksNav.setForeground(new java.awt.Color(0, 153, 255));
        ReturnedBooksNav.setText("Returned Books");
        ReturnedBooksNav.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ReturnedBooksNavMouseClicked(evt);
            }
        });
        getContentPane().add(ReturnedBooksNav, new org.netbeans.lib.awtextra.AbsoluteConstraints(1030, 50, -1, -1));

        AddNewMemberNav4.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        AddNewMemberNav4.setForeground(new java.awt.Color(0, 153, 255));
        AddNewMemberNav4.setText("Add New Member");
        AddNewMemberNav4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AddNewMemberNav4MouseClicked(evt);
            }
        });
        getContentPane().add(AddNewMemberNav4, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 50, -1, -1));

        AddNewBookNav.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        AddNewBookNav.setForeground(new java.awt.Color(0, 153, 255));
        AddNewBookNav.setText("Add New Book");
        AddNewBookNav.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AddNewBookNavMouseClicked(evt);
            }
        });
        getContentPane().add(AddNewBookNav, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 50, -1, -1));

        jLabel9.setIcon(new javax.swing.ImageIcon("H:\\JAVA Projects\\LMS_new\\public\\large screen.jpg")); // NOI18N
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void setupStudentNameListener() {
        StudentID.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                fetchStudentName();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                fetchStudentName();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                fetchStudentName();
            }
        });
    }
    
    private void setupBookTitleListener() {
        BookID.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                fetchBookTitle();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                fetchBookTitle();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                fetchBookTitle();
            }
        });
    }
    
private void fetchStudentName() {
        String studentID = StudentID.getText();
        try {
            // Check if connection is successful
            Connection con = ConnectionProvider.getConnection();
            if (con == null) {
                JOptionPane.showMessageDialog(this, "Database connection failed!");
                return;
            }

            // Prepare SQL statement to fetch student name
            String sql = "SELECT student_name, tp_number, address, course FROM students WHERE student_id = ?";
            PreparedStatement pst = con.prepareStatement(sql);
            pst.setString(1, studentID);

            // Execute the query
            ResultSet rs = pst.executeQuery();

            if (rs.next()) {
                String studentName = rs.getString("student_name");
                //String tpNumber = rs.getString("tp_number");
               //String address = rs.getString("address");
              //String course = rs.getString("course");

                StudentName.setText(studentName);
                // You can also set the other fields here if needed
                // TpNumber.setText(tpNumber);
                // Address.setText(address);
                // Course.setText(course);
            } else {
                StudentName.setText("");
            }

            // Close the prepared statement and result set
            pst.close();
            rs.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Database Error: " + e.getMessage());
            System.out.println("SQL State: " + e.getSQLState());
            System.out.println("Error Code: " + e.getErrorCode());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
            e.printStackTrace();
        }
    }

private void fetchBookTitle() {
        String bookID = BookID.getText();
        try {
            // Check if connection is successful
            Connection con = ConnectionProvider.getConnection();
            if (con == null) {
                JOptionPane.showMessageDialog(this, "Database connection failed!");
                return;
            }

            // Prepare SQL statement to fetch student name
            String sql = "SELECT book_title FROM books WHERE book_id = ?";
            PreparedStatement pst = con.prepareStatement(sql);
            pst.setString(1, bookID);

            // Execute the query
            ResultSet rs = pst.executeQuery();

            if (rs.next()) {
                String bookTitle = rs.getString("book_title");

                BookTitle.setText(bookTitle);

            } else {
                BookTitle.setText("");
            }

            // Close the prepared statement and result set
            pst.close();
            rs.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Database Error: " + e.getMessage());
            System.out.println("SQL State: " + e.getSQLState());
            System.out.println("Error Code: " + e.getErrorCode());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void fetchAndDisplayIssuedBooks() {
    try {
        // Check if connection is successful
        Connection con = ConnectionProvider.getConnection();
        if (con == null) {
            JOptionPane.showMessageDialog(this, "Database connection failed!");
            return;
        }

        // Prepare SQL statement to fetch specific columns, excluding timestamp
        String sql = "SELECT issued_id, student_id, student_name, book_id, book_name, issued_date, due_date FROM issued_books";
        PreparedStatement pst = con.prepareStatement(sql);

        // Execute the query
        ResultSet rs = pst.executeQuery();

        // Create a default table model
        DefaultTableModel model = (DefaultTableModel) IssuedBooksTable.getModel();
        // Clear existing rows
        model.setRowCount(0);

        // Column names (without timestamp)
        String[] columnNames = {"Issue ID", "Student ID", "Student Name", "Book ID", "Book Name", "Issued Date", "Due Date"};
        model.setColumnIdentifiers(columnNames);
            
        // Populate the table
        while (rs.next()) {
            String issuedID = rs.getString("issued_id");
            String studentID = rs.getString("student_id");
            String studentName = rs.getString("student_name");
            String bookID = rs.getString("book_id");
            String bookName = rs.getString("book_name");
            String issuedDate = rs.getString("issued_date");
            String dueDate = rs.getString("due_date");

            // Add row to the table
            Object[] row = {issuedID, studentID, studentName, bookID, bookName, issuedDate, dueDate};
            model.addRow(row);
        }

        // Close the prepared statement and result set
        pst.close();
        rs.close();
        con.close();

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Database Error: " + e.getMessage());
        System.out.println("SQL State: " + e.getSQLState());
        System.out.println("Error Code: " + e.getErrorCode());
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
        e.printStackTrace();
    }
}
    
     private void clearSearch() {
        SearchField.setText("");
        fetchAndDisplayIssuedBooks();
    }
    
    private void StudentIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StudentIDActionPerformed
        
    }//GEN-LAST:event_StudentIDActionPerformed

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        try {
            // Get values from form fields
            String issuedID = IssuedID.getText();
            String studentID = StudentID.getText();
            String studentName = StudentName.getText();
            String bookID = BookID.getText();
            String bookTitle = BookTitle.getText();
            Date issuedDate = IssuedDate.getDate();
            Date dueDate = DueDate.getDate();

            // Basic validation
            if (issuedID.isEmpty() || studentID.isEmpty() || studentName.isEmpty() || bookID.isEmpty() || bookTitle.isEmpty() || issuedDate == null || dueDate == null) {
                JOptionPane.showMessageDialog(this, "All fields are required!");
                return;
            }

            // Check if connection is successful
            Connection con = ConnectionProvider.getConnection();
            if (con == null) {
                JOptionPane.showMessageDialog(this, "Database connection failed!");
                return;
            }

            try {
                // Prepare SQL statement
                String sql = "INSERT INTO issued_books (issued_id, student_id, student_name, book_id, book_name, issued_date, due_date) " +
                            "VALUES (?, ?, ?, ?, ?, ?, ?)";
                PreparedStatement pst = con.prepareStatement(sql);

                // Set values in prepared statement
                pst.setString(1, issuedID);
                pst.setString(2, studentID);
                pst.setString(3, studentName);
                pst.setString(4, bookID);
                pst.setString(5, bookTitle);
                pst.setString(6, new SimpleDateFormat("yyyy-MM-dd").format(issuedDate));
                pst.setString(7, new SimpleDateFormat("yyyy-MM-dd").format(dueDate));

                // Debug print the SQL
               System.out.println("Executing SQL: " + pst.toString());
        
                int result = pst.executeUpdate();
                System.out.println("Rows affected: " + result);

                if (result > 0) {
                    JOptionPane.showMessageDialog(this, "Book Issued Successfully!");
                    // Clear fields without triggering any additional events
                    IssuedID.setText("");
                    StudentID.setText("");
                    StudentName.setText("");
                    BookID.setText("");
                    BookTitle.setText("");
                    IssuedDate.setDate(null);
                    DueDate.setDate(null);
                    
                    // Refresh the table
                   fetchAndDisplayIssuedBooks();
                    
                } else {
                    JOptionPane.showMessageDialog(this, "Failed to issue book!");
                }

                // Close the prepared statement
                pst.close();
                con.close();

            } finally {
                // Always close the connection
                try {
                    if (con != null && !con.isClosed()) {
                        con.close();
                    }
                } catch (SQLException e) {
                    // Just log the error but don't show to user since data was saved
                    System.out.println("Error closing connection: " + e.getMessage());
                }
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Database Error: " + e.getMessage());
            System.out.println("SQL State: " + e.getSQLState());
            System.out.println("Error Code: " + e.getErrorCode());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
            e.printStackTrace();
        }
    }//GEN-LAST:event_saveActionPerformed

    private void closeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeActionPerformed
        setVisible(false);
        new home().setVisible(true);
    }//GEN-LAST:event_closeActionPerformed

    private void BookIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BookIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BookIDActionPerformed

    private void IssuedBooksTableAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_IssuedBooksTableAncestorAdded
        fetchAndDisplayIssuedBooks();
    }//GEN-LAST:event_IssuedBooksTableAncestorAdded

    private void SearchFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SearchFieldActionPerformed

    private void SearchField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SearchField1ActionPerformed

    private void SearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchActionPerformed
        String searchTerm = SearchField1.getText().trim();  // Changed from SearchField to SearchField1 to match your UI

    if (searchTerm.isEmpty()) {
        // If search field is empty, show all records
        fetchAndDisplayIssuedBooks();
        return;
    }

    try {
        Connection con = ConnectionProvider.getConnection();
        if (con == null) {
            JOptionPane.showMessageDialog(this, "Database connection failed!");
            return;
        }

        // Modified SQL to search in issued_books table and search across multiple fields
        String sql = "SELECT issued_id, student_id, student_name, book_id, book_name, issued_date, due_date " +
                    "FROM issued_books " +
                    "WHERE student_id LIKE ? OR student_name LIKE ? OR book_id LIKE ? OR book_name LIKE ?";
                    
        PreparedStatement pst = con.prepareStatement(sql);
        
        // Set search parameters with wildcards for partial matching
        String searchPattern = "%" + searchTerm + "%";
        pst.setString(1, searchPattern);
        pst.setString(2, searchPattern);
        pst.setString(3, searchPattern);
        pst.setString(4, searchPattern);
        
        ResultSet rs = pst.executeQuery();

        DefaultTableModel model = (DefaultTableModel) IssuedBooksTable.getModel();
        model.setRowCount(0); // Clear existing rows

        boolean found = false;
        while (rs.next()) {
            found = true;
            Object[] row = {
                rs.getString("issued_id"),
                rs.getString("student_id"),
                rs.getString("student_name"),
                rs.getString("book_id"),
                rs.getString("book_name"),
                rs.getString("issued_date"),
                rs.getString("due_date")
            };
            model.addRow(row);
        }

        if (!found) {
            JOptionPane.showMessageDialog(this, "No records found for: " + searchTerm);
            // After showing error, optionally show all records
            fetchAndDisplayIssuedBooks();
        }

        // Close connections
        rs.close();
        pst.close();
        con.close();

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error searching data: " + e.getMessage());
        e.printStackTrace();
    }
    }//GEN-LAST:event_SearchActionPerformed

    private void ShowAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowAllActionPerformed
        clearSearch();
    }//GEN-LAST:event_ShowAllActionPerformed

    private void LibraryDashboardNavMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LibraryDashboardNavMouseClicked
//        setVisible(false);
//        new issuedBooks().setVisible(true);
    }//GEN-LAST:event_LibraryDashboardNavMouseClicked

    private void IssuedBooksNavMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_IssuedBooksNavMouseClicked
       setVisible(false);
        new dashBoard().setVisible(true);                                                         
    }//GEN-LAST:event_IssuedBooksNavMouseClicked

    private void ReturnedBooksNavMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ReturnedBooksNavMouseClicked
        setVisible(false);
        new returnedBooks().setVisible(true);
    }//GEN-LAST:event_ReturnedBooksNavMouseClicked

    private void AddNewMemberNav4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AddNewMemberNav4MouseClicked
        setVisible(false);
        new newStudents().setVisible(true);
    }//GEN-LAST:event_AddNewMemberNav4MouseClicked

    private void AddNewBookNavMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AddNewBookNavMouseClicked
        setVisible(false);
        new newBooks().setVisible(true);
    }//GEN-LAST:event_AddNewBookNavMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(issuedBooks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(issuedBooks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(issuedBooks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(issuedBooks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new issuedBooks().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel AddNewBookNav;
    private javax.swing.JLabel AddNewMemberNav;
    private javax.swing.JLabel AddNewMemberNav1;
    private javax.swing.JLabel AddNewMemberNav2;
    private javax.swing.JLabel AddNewMemberNav3;
    private javax.swing.JLabel AddNewMemberNav4;
    private javax.swing.JTextField BookID;
    private javax.swing.JTextField BookTitle;
    private com.toedter.calendar.JDateChooser DueDate;
    private javax.swing.JLabel IssuedBooksNav;
    private javax.swing.JTable IssuedBooksTable;
    private com.toedter.calendar.JDateChooser IssuedDate;
    private javax.swing.JTextField IssuedID;
    private javax.swing.JLabel LibraryDashboardNav;
    private javax.swing.JLabel ReturnedBooksNav;
    private javax.swing.JButton Search;
    private javax.swing.JTextField SearchField;
    private javax.swing.JTextField SearchField1;
    private javax.swing.JButton ShowAll;
    private javax.swing.JTextField StudentID;
    private javax.swing.JTextField StudentID1;
    private javax.swing.JTextField StudentName;
    private javax.swing.JButton close;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton save;
    // End of variables declaration//GEN-END:variables
}
