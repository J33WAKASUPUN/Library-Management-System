
import Project.ConnectionProvider;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author User
 */
public class newBooks extends javax.swing.JFrame {

    /**
     * Creates new form newBooks
     */
    public newBooks() {
        initComponents();
        setupTable();
        fetchAndDisplayBooks();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        studentID = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        BookID = new javax.swing.JTextField();
        BookTitle = new javax.swing.JTextField();
        Author = new javax.swing.JTextField();
        PublicationYear = new javax.swing.JTextField();
        Language = new javax.swing.JTextField();
        CopiesAvailable = new javax.swing.JTextField();
        Genre = new javax.swing.JComboBox<>();
        Formate = new javax.swing.JComboBox<>();
        save = new javax.swing.JButton();
        close = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        BooksTable = new javax.swing.JTable();
        SearchField = new javax.swing.JTextField();
        Search = new javax.swing.JButton();
        Edit = new javax.swing.JButton();
        Delete = new javax.swing.JButton();
        ShowAll = new javax.swing.JButton();
        AddNewMemberNav = new javax.swing.JLabel();
        AddNewBookNav = new javax.swing.JLabel();
        IssuedBooksNav = new javax.swing.JLabel();
        ReturnedBooksNav = new javax.swing.JLabel();
        LibraryDashboardNav = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();

        studentID.setBackground(new java.awt.Color(255, 255, 255));
        studentID.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        studentID.setForeground(new java.awt.Color(0, 102, 255));
        studentID.setCaretColor(new java.awt.Color(0, 102, 255));

        jLabel9.setIcon(new javax.swing.ImageIcon("H:\\JAVA Projects\\LMS_new\\public\\large screen.jpg")); // NOI18N

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocation(new java.awt.Point(0, 135));
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Book ID");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 180, -1, -1));

        jLabel2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Book title");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 220, -1, -1));

        jLabel3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Author");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 260, -1, -1));

        jLabel4.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Publication Year");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 300, -1, -1));

        jLabel5.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Language");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 340, -1, -1));

        jLabel6.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Genre");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 420, -1, -1));

        jLabel7.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Format");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 460, -1, -1));

        jLabel8.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Copies Available");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 380, -1, -1));

        BookID.setBackground(new java.awt.Color(255, 255, 255));
        BookID.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        BookID.setForeground(new java.awt.Color(0, 102, 255));
        BookID.setCaretColor(new java.awt.Color(0, 102, 255));
        BookID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BookIDActionPerformed(evt);
            }
        });
        getContentPane().add(BookID, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 170, 234, 30));

        BookTitle.setBackground(new java.awt.Color(255, 255, 255));
        BookTitle.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        BookTitle.setForeground(new java.awt.Color(0, 102, 255));
        BookTitle.setCaretColor(new java.awt.Color(0, 102, 255));
        getContentPane().add(BookTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 210, 234, 30));

        Author.setBackground(new java.awt.Color(255, 255, 255));
        Author.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        Author.setForeground(new java.awt.Color(0, 102, 255));
        Author.setCaretColor(new java.awt.Color(0, 102, 255));
        getContentPane().add(Author, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 250, 234, 29));

        PublicationYear.setBackground(new java.awt.Color(255, 255, 255));
        PublicationYear.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        PublicationYear.setForeground(new java.awt.Color(0, 102, 255));
        PublicationYear.setCaretColor(new java.awt.Color(0, 102, 255));
        PublicationYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PublicationYearActionPerformed(evt);
            }
        });
        getContentPane().add(PublicationYear, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 290, 234, 31));

        Language.setBackground(new java.awt.Color(255, 255, 255));
        Language.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        Language.setForeground(new java.awt.Color(0, 102, 255));
        Language.setCaretColor(new java.awt.Color(0, 102, 255));
        Language.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LanguageActionPerformed(evt);
            }
        });
        getContentPane().add(Language, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 330, 234, 31));

        CopiesAvailable.setBackground(new java.awt.Color(255, 255, 255));
        CopiesAvailable.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        CopiesAvailable.setForeground(new java.awt.Color(0, 102, 255));
        CopiesAvailable.setCaretColor(new java.awt.Color(0, 102, 255));
        CopiesAvailable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CopiesAvailableActionPerformed(evt);
            }
        });
        getContentPane().add(CopiesAvailable, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 370, 234, 31));

        Genre.setBackground(new java.awt.Color(255, 255, 255));
        Genre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        Genre.setForeground(new java.awt.Color(0, 102, 255));
        Genre.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Fiction", "Fantasy", "Science Fiction", "Mystery", "Thriller", "Romance", "Historical Fiction", "Non-Fiction", "Biography", "Self-Help", "Business", "Science", "Technology", "History", "Philosophy", "Poetry", "Drama", "Children's Literature" }));
        Genre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GenreActionPerformed(evt);
            }
        });
        getContentPane().add(Genre, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 410, 234, 34));

        Formate.setBackground(new java.awt.Color(255, 255, 255));
        Formate.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        Formate.setForeground(new java.awt.Color(0, 102, 255));
        Formate.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Hardcover", "Paperback", "E-Book", "Audio Book", "Digital PDF", "Large Print", "Library Binding" }));
        Formate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FormateActionPerformed(evt);
            }
        });
        getContentPane().add(Formate, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 455, 234, 35));

        save.setBackground(new java.awt.Color(51, 153, 255));
        save.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        save.setForeground(new java.awt.Color(255, 255, 255));
        save.setText("Save");
        save.setBorder(null);
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });
        getContentPane().add(save, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 520, 234, 30));

        close.setBackground(new java.awt.Color(255, 51, 51));
        close.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        close.setForeground(new java.awt.Color(255, 255, 255));
        close.setText("Close");
        close.setBorder(null);
        close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeActionPerformed(evt);
            }
        });
        getContentPane().add(close, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 560, 234, 30));

        jLabel13.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText("BookWise | Library Management System");
        getContentPane().add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 660, -1, -1));

        BooksTable.setBackground(new java.awt.Color(51, 153, 255));
        BooksTable.setFont(new java.awt.Font("Arial", 1, 10)); // NOI18N
        BooksTable.setForeground(new java.awt.Color(255, 255, 255));
        BooksTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5", "Title 6", "Title 7", "Title 8"
            }
        ));
        BooksTable.setGridColor(new java.awt.Color(255, 255, 255));
        BooksTable.setIntercellSpacing(new java.awt.Dimension(2, 2));
        BooksTable.setSelectionBackground(new java.awt.Color(255, 51, 51));
        BooksTable.setSelectionForeground(new java.awt.Color(255, 255, 255));
        BooksTable.setShowGrid(true);
        BooksTable.setSurrendersFocusOnKeystroke(true);
        BooksTable.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                BooksTableAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jScrollPane1.setViewportView(BooksTable);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 170, 620, -1));

        SearchField.setBackground(new java.awt.Color(255, 255, 255));
        SearchField.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        SearchField.setForeground(new java.awt.Color(0, 102, 255));
        SearchField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchFieldActionPerformed(evt);
            }
        });
        getContentPane().add(SearchField, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 130, 180, 30));

        Search.setBackground(new java.awt.Color(51, 153, 255));
        Search.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        Search.setForeground(new java.awt.Color(255, 255, 255));
        Search.setText("Search");
        Search.setBorder(null);
        Search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchActionPerformed(evt);
            }
        });
        getContentPane().add(Search, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 130, 100, 30));

        Edit.setBackground(new java.awt.Color(51, 153, 255));
        Edit.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        Edit.setForeground(new java.awt.Color(255, 255, 255));
        Edit.setText("Edit");
        Edit.setBorder(null);
        Edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditActionPerformed(evt);
            }
        });
        getContentPane().add(Edit, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 130, 100, 30));

        Delete.setBackground(new java.awt.Color(255, 51, 51));
        Delete.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        Delete.setForeground(new java.awt.Color(255, 255, 255));
        Delete.setText("Delete");
        Delete.setBorder(null);
        Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteActionPerformed(evt);
            }
        });
        getContentPane().add(Delete, new org.netbeans.lib.awtextra.AbsoluteConstraints(1100, 130, 100, 30));

        ShowAll.setBackground(new java.awt.Color(51, 153, 255));
        ShowAll.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        ShowAll.setForeground(new java.awt.Color(255, 255, 255));
        ShowAll.setText("Show All");
        ShowAll.setBorder(null);
        ShowAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowAllActionPerformed(evt);
            }
        });
        getContentPane().add(ShowAll, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 130, 100, 30));

        AddNewMemberNav.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        AddNewMemberNav.setForeground(new java.awt.Color(0, 153, 255));
        AddNewMemberNav.setText("Add New Member");
        AddNewMemberNav.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AddNewMemberNavMouseClicked(evt);
            }
        });
        getContentPane().add(AddNewMemberNav, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 60, -1, -1));

        AddNewBookNav.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        AddNewBookNav.setForeground(new java.awt.Color(0, 153, 255));
        AddNewBookNav.setText("Library Dashboard");
        AddNewBookNav.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AddNewBookNavMouseClicked(evt);
            }
        });
        getContentPane().add(AddNewBookNav, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 60, -1, -1));

        IssuedBooksNav.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        IssuedBooksNav.setForeground(new java.awt.Color(0, 153, 255));
        IssuedBooksNav.setText("Issued Books");
        IssuedBooksNav.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                IssuedBooksNavMouseClicked(evt);
            }
        });
        getContentPane().add(IssuedBooksNav, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 60, -1, -1));

        ReturnedBooksNav.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        ReturnedBooksNav.setForeground(new java.awt.Color(0, 153, 255));
        ReturnedBooksNav.setText("      Returned Books");
        ReturnedBooksNav.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ReturnedBooksNavMouseClicked(evt);
            }
        });
        getContentPane().add(ReturnedBooksNav, new org.netbeans.lib.awtextra.AbsoluteConstraints(1010, 60, -1, -1));

        LibraryDashboardNav.setFont(new java.awt.Font("Arial", 0, 36)); // NOI18N
        LibraryDashboardNav.setForeground(new java.awt.Color(255, 255, 255));
        LibraryDashboardNav.setText("    Add New Book");
        LibraryDashboardNav.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                LibraryDashboardNavMouseClicked(evt);
            }
        });
        getContentPane().add(LibraryDashboardNav, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 40, -1, -1));

        jLabel10.setIcon(new javax.swing.ImageIcon("H:\\JAVA Projects\\LMS_new\\public\\large screen.jpg")); // NOI18N
        jLabel10.setText("jLabel10");
        getContentPane().add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BookIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BookIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BookIDActionPerformed

    private void PublicationYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PublicationYearActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PublicationYearActionPerformed

    private void LanguageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LanguageActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_LanguageActionPerformed

    private void CopiesAvailableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CopiesAvailableActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CopiesAvailableActionPerformed

    private void FormateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FormateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_FormateActionPerformed

    private void GenreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GenreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_GenreActionPerformed

     private void setupTable() {
    String[] columnNames = {"Book ID", "Book Title", "Author", "Publication Year", "Language", "Copies Available", "Genre", "Format"};
    DefaultTableModel model = new DefaultTableModel(columnNames, 0);
    BooksTable.setModel(model);
}

    // Add this method to fetch and display data
    private void fetchAndDisplayBooks() {
    try {
        Connection con = ConnectionProvider.getConnection();
        if (con == null) {
            JOptionPane.showMessageDialog(this, "Database connection failed!");
            return;
        }

        String sql = "SELECT book_id, book_title, author, publication_year, language, copies_available, genre, format FROM books";
        PreparedStatement pst = con.prepareStatement(sql);
        ResultSet rs = pst.executeQuery();

        // Get the table model and clear existing rows
        DefaultTableModel model = (DefaultTableModel) BooksTable.getModel();
        model.setRowCount(0);

        // Add rows to table
        while (rs.next()) {
            Object[] row = {
                rs.getString("book_id"),
                rs.getString("book_title"),
                rs.getString("author"),
                rs.getString("publication_year"),
                rs.getString("language"),
                rs.getString("copies_available"),
                rs.getString("genre"),
                rs.getString("format")
            };
            model.addRow(row);
        }

        // Close connections
        rs.close();
        pst.close();
        con.close();

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error fetching data: " + e.getMessage());
        e.printStackTrace();
    }
}
    
     private void clearSearch() {
        SearchField.setText("");
        fetchAndDisplayBooks();
    }
    
    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        try {
        // Get values from form fields
        String bookId = BookID.getText();
        String bookTitle = BookTitle.getText();
        String author = Author.getText();
        String publicationYear = PublicationYear.getText();
        String language = Language.getText();
        String copiesAvailable = CopiesAvailable.getText();
        String genre = Genre.getSelectedItem().toString();
        String format = Formate.getSelectedItem().toString();
        
        // Basic validation
        if (bookId.isEmpty() || bookTitle.isEmpty() || author.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Book ID, Title and Author are required fields!");
            return;
        }

        // Check if connection is successful
        Connection con = ConnectionProvider.getConnection();
        if (con == null) {
            JOptionPane.showMessageDialog(this, "Database connection failed!");
            return;
        }

        try {
            // Prepare SQL statement
            String sql = "INSERT INTO books (book_id, book_title, author, publication_year, language, " +
                        "copies_available, genre, format) VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
            PreparedStatement pst = con.prepareStatement(sql);
            
            // Set values in prepared statement
            pst.setString(1, bookId);
            pst.setString(2, bookTitle);
            pst.setString(3, author);
            pst.setString(4, publicationYear);
            pst.setString(5, language);
            pst.setString(6, copiesAvailable);
            pst.setString(7, genre);
            pst.setString(8, format);
            
            // Debug print the SQL
            System.out.println("Executing SQL: " + pst.toString());
        
            int result = pst.executeUpdate();
            System.out.println("Rows affected: " + result);
            
            if (result > 0) {
                JOptionPane.showMessageDialog(this, "Book Added Successfully!");
                // Clear fields without triggering any additional events
                
                // Refresh the table immediately after saving
                 fetchAndDisplayBooks();
            
                BookID.setText("");
                BookTitle.setText("");
                Author.setText("");
                PublicationYear.setText("");
                Language.setText("");
                CopiesAvailable.setText("");
                // Safely set combo box values
                try {
                    Genre.setSelectedIndex(0);
                    Formate.setSelectedIndex(0);
                } catch (Exception e) {
                    // Ignore combo box errors
                }
            } else {
                JOptionPane.showMessageDialog(this, "Failed to add book!");
            }
            
            // Close the prepared statement
            pst.close();
            con.close();
            
        } finally {
            // Always close the connection
            try {
                if (con != null && !con.isClosed()) {
                    con.close();
                }
            } catch (SQLException e) {
                // Just log the error but don't show to user since data was saved
                System.out.println("Error closing connection: " + e.getMessage());
            }
        }
        
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Database Error: " + e.getMessage());
            System.out.println("SQL State: " + e.getSQLState());
            System.out.println("Error Code: " + e.getErrorCode());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
            e.printStackTrace();
      }        
    }//GEN-LAST:event_saveActionPerformed

    private void closeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeActionPerformed
        setVisible(false);
        new home().setVisible(true);
    }//GEN-LAST:event_closeActionPerformed

    private void BooksTableAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_BooksTableAncestorAdded
        fetchAndDisplayBooks();
    }//GEN-LAST:event_BooksTableAncestorAdded

    private void SearchFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SearchFieldActionPerformed

    private void SearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchActionPerformed
        String searchId = SearchField.getText().trim();

    if (searchId.isEmpty()) {
        // If search field is empty, use clearSearch to show all records
        clearSearch();
        return;
    }

    try {
        Connection con = ConnectionProvider.getConnection();
        if (con == null) {
            JOptionPane.showMessageDialog(this, "Database connection failed!");
            return;
        }

        String sql = "SELECT book_id, book_title, author, publication_year, language, copies_available, genre, format FROM books WHERE book_id = ?";
        PreparedStatement pst = con.prepareStatement(sql);
        pst.setString(1, searchId);
        ResultSet rs = pst.executeQuery();

        DefaultTableModel model = (DefaultTableModel) BooksTable.getModel();
        model.setRowCount(0); // Clear existing rows

        boolean found = false;
        while (rs.next()) {
            found = true;
            Object[] row = {
                rs.getString("book_id"),
                rs.getString("book_title"),
                rs.getString("author"),
                rs.getString("publication_year"),
                rs.getString("language"),
                rs.getString("copies_available"),
                rs.getString("genre"),
                rs.getString("format")
            };
            model.addRow(row);
        }

        if (!found) {
            JOptionPane.showMessageDialog(this, "No book found with ID: " + searchId);
            // After showing error, clear search and show all records
            clearSearch();
        }

        // Close connections
        rs.close();
        pst.close();
        con.close();

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error searching data: " + e.getMessage());
        e.printStackTrace();
    }
    }//GEN-LAST:event_SearchActionPerformed

    private void EditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditActionPerformed
        setVisible(false);
        new editBooks().setVisible(true);
    }//GEN-LAST:event_EditActionPerformed

    private void DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteActionPerformed
        // Get the selected row from the table
    int selectedRow = BooksTable.getSelectedRow();

    // Check if a row is selected
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Please select a book to delete");
        return;
    }

    // Get the book ID from the selected row
    String bookId = BooksTable.getValueAt(selectedRow, 0).toString();

    // Confirm before deletion
    int confirm = JOptionPane.showConfirmDialog(this,
        "Are you sure you want to delete book with ID: " + bookId + "?",
        "Confirm Deletion",
        JOptionPane.YES_NO_OPTION);

    if (confirm == JOptionPane.YES_OPTION) {
        try {
            Connection con = ConnectionProvider.getConnection();
            if (con == null) {
                JOptionPane.showMessageDialog(this, "Database connection failed!");
                return;
            }

            String sql = "DELETE FROM books WHERE book_id = ?";
            PreparedStatement pst = con.prepareStatement(sql);
            pst.setString(1, bookId);

            int result = pst.executeUpdate();

            if (result > 0) {
                JOptionPane.showMessageDialog(this, "Book deleted successfully!");
                // Clear search field and refresh table
                clearSearch();
            } else {
                JOptionPane.showMessageDialog(this, "Failed to delete book!");
            }

            // Close connection
            pst.close();
            con.close();

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error deleting data: " + e.getMessage());
            e.printStackTrace();
        }
      }
    }//GEN-LAST:event_DeleteActionPerformed

    private void ShowAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowAllActionPerformed
        clearSearch();
    }//GEN-LAST:event_ShowAllActionPerformed

    private void AddNewMemberNavMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AddNewMemberNavMouseClicked
        setVisible(false);
        new newStudents().setVisible(true);
    }//GEN-LAST:event_AddNewMemberNavMouseClicked

    private void AddNewBookNavMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AddNewBookNavMouseClicked
        setVisible(false);
         new dashBoard().setVisible(true);
    }//GEN-LAST:event_AddNewBookNavMouseClicked

    private void IssuedBooksNavMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_IssuedBooksNavMouseClicked
        setVisible(false);
        new issuedBooks().setVisible(true);
    }//GEN-LAST:event_IssuedBooksNavMouseClicked

    private void ReturnedBooksNavMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ReturnedBooksNavMouseClicked
        setVisible(false);
        new returnedBooks().setVisible(true);
    }//GEN-LAST:event_ReturnedBooksNavMouseClicked

    private void LibraryDashboardNavMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LibraryDashboardNavMouseClicked
//        setVisible(false);
//        new issuedBooks().setVisible(true);
    }//GEN-LAST:event_LibraryDashboardNavMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(newBooks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(newBooks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(newBooks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(newBooks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new newBooks().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel AddNewBookNav;
    private javax.swing.JLabel AddNewMemberNav;
    private javax.swing.JTextField Author;
    private javax.swing.JTextField BookID;
    private javax.swing.JTextField BookTitle;
    private javax.swing.JTable BooksTable;
    private javax.swing.JTextField CopiesAvailable;
    private javax.swing.JButton Delete;
    private javax.swing.JButton Edit;
    private javax.swing.JComboBox<String> Formate;
    private javax.swing.JComboBox<String> Genre;
    private javax.swing.JLabel IssuedBooksNav;
    private javax.swing.JTextField Language;
    private javax.swing.JLabel LibraryDashboardNav;
    private javax.swing.JTextField PublicationYear;
    private javax.swing.JLabel ReturnedBooksNav;
    private javax.swing.JButton Search;
    private javax.swing.JTextField SearchField;
    private javax.swing.JButton ShowAll;
    private javax.swing.JButton close;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton save;
    private javax.swing.JTextField studentID;
    // End of variables declaration//GEN-END:variables

    private void clearFields() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
}
